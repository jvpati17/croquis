found in models/user:

async function login(req, res) {
    try {
        const user = await User.findOne({email: req.body.email});
        if (!user) throw new Error();
        const match = await bcrypt.compare(req.body.password, user.password);
        if (!match) throw new Error();
        const token = createJWT(user);
        res.json(token);
    } catch (err) {
        res.status(400).json('Bad Credentials');
    }
}

auth page:

 function handleLogin() {
        userService.login();
        setUser(setUser);
    }

     <LogInForm onClick={ handleLogin } setUser={ setUser } /> 


prior users-api:

     import sendRequest from './send-request';
const BASE_URL =  '/api/users';

export async function signUp(userData) {
    const res = await fetch(BASE_URL, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(userData)
    });

    if (res.ok) {
        return res.json();
    } else {
        throw new Error('Invalid Sign Up');
    }
}

export async function login(credentials) {
    const res = await fetch(`${BASE_URL}/login`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(credentials)
    });

    if (res.ok) {
        return res.json();
    } else {
        throw new Error('Invalid Log In');
    }
}

from controllers/api/users.js :

async function login(req, res) {
    try {
        const user = await User.findOne({ email: req.body.email });
        if (!user) throw new Error(); 
        const match = await bcrypt.compare( req.body.password, user.password );
        if (!match) throw new Error();
        res.json( createJWT(user));
    } catch {
        res.status(400).json('Bad Credentials');
    }
}

